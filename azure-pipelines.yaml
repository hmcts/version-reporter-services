name: Version Reporter Service - Backend

trigger:
  batch: true
  branches:
    include:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: timeoutInMinutes
    value: 60
  - name: project
    value: "versionreporter"
  - name: product
    value: "cft-platform"
  - name: terraformInitSubscription
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: action
    value: ${{ parameters.action }}
  - name: acrResourceGroup
    value: "rpe-acr-prod-rg"
  - name: acrName
    value: "hmctspublic"
  - name: acrServiceConnection
    value: "DCD-CNP-Prod"
  - name: acrRepository
    value: "version-reporter-service"

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

parameters:
  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"

  - name: overrideAction
    displayName: Override Action
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: prImage
    displayName: Build PR Image
    type: boolean
    default: false
    values:
      - true
      - false

  # If you need to republish a particular report image
  - name: publishImage
    displayName: Publish New Image
    type: string
    default: "None"
    values:
      - "None"
      - "aksversions"
      - "docsoutdated"
      - "helmcharts"
      - "paloalto"
      - "renovate"
      - "hourlyusage"
      - "All"

  - name: action
    displayName: Action
    type: string
    default: plan
    values:
      - plan
      - apply

  - name: reports
    displayName: Report to build
    type: object
    default:
      - name: "aksversions"
        type: "bash"
      - name: "helmcharts"
        type: "bash"
      - name: "paloalto"
        type: "python"
      - name: "renovate"
        type: "bash"
      - name: "docsoutdated"
        type: "python"
      - name: "hourlyusage"
        type: "python"

  - name: environments
    type: object
    default:
    - deployment: 'sbox'
      displayName: 'sbox-terraform'
      environment: 'sbox'
      service_connection: 'DTS-CFTSBOX-INTSVC'
      dependsOn: 'Precheck'

    - deployment: 'ptl'
      displayName: 'ptl-terraform'
      environment: 'ptl'
      service_connection: '"DTS-CFTPTL-INTSVC"'
      dependsOn: 'Precheck'

stages:
  - stage: Precheck
    jobs:
      - job:
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-sp-token'
              serviceConnection: 'DCD-CFT-Sandbox'
              overrideAction: ${{ parameters.overrideAction }}

  - ${{ each deployment in parameters.environments }}:
    - stage: ${{ deployment.deployment }}
      dependsOn: ${{ deployment.dependsOn }}
      displayName: ${{ deployment.displayName }}
      jobs:
        - job: PlanAndApply
          steps:
            - template: steps/terraform.yaml@cnp-azuredevops-libraries
              parameters:
                location: ${{ parameters.location }}
                serviceConnection: ${{ deployment.service_connection }}
                product: ${{ variables.product }}
                overrideAction: ${{ parameters.overrideAction }}
                environment: ${{ deployment.environment }}
                component: "versionreporting"
                terraformInitSubscription: ${{ variables.terraformInitSubscription }}
                tfVarsFile: NULL
                initCommandOptions: >
                  -reconfigure
                planCommandOptions: >
                  -compact-warnings
                  -lock-timeout=30s

  - stage: "Reports"
    displayName: "Reports"
    jobs:
    - ${{ each report in parameters.reports }}:
      - job: BuildArtifact_${{report.name}}
        displayName: Build ${{report.name}} Artifact
        steps:
        - ${{ if eq( report['type'], 'nodejs') }}:
          - template: "pipeline-templates/build-nodejs.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              versionSpec: "18.x"
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
        - ${{ elseif eq( report['type'], 'python')  }}:
          - template: "pipeline-templates/build-python.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              versionSpec: "3.11"
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
        - ${{ else }}:
          - template: "reports/${{report.name}}/build.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}

      - job: PushContainer_${{report.name}}
        dependsOn: BuildArtifact_${{report.name}}
        displayName: Push ${{report.name}} Container
        condition: |
          or(
            and(
              succeeded(), 
              eq(variables['isMain'], true),
              or(eq('${{parameters.publishImage}}', '${{report.name}}'), 
                eq('${{parameters.publishImage}}', 'All'))
            ),
            and(succeeded(), eq('${{parameters.prImage}}', true))
          )
        steps:
          - script: |
              repo_sha=$(git rev-parse --verify HEAD)
              image_tag_sha=${repo_sha:0:7}
              last_commit_time=$(date +'%Y%m%d%H%M%S')
              image_tag=$(echo ${image_tag_sha}-${last_commit_time})
              
              echo "##vso[task.setvariable variable=tag]${{variables.acrRepository}}/${{report.name}}:prod-${image_tag}"
            displayName: "ACR: Tag ${{report.name}}"

          - task: AzureCLI@1
            displayName: 'ACR: Build ${{report.name}}'
            enabled: true
            inputs:
              azureSubscription: ${{ variables.acrServiceConnection }}
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
              scriptType: bash
              scriptPath: $(System.DefaultWorkingDirectory)/pipeline-scripts/publish-image.sh
              arguments: ${{report.name}} $(tag) ${{variables.acrResourceGroup}} ${{variables.acrName}}

