name: Version Reporter Service Jobs

trigger:
  branches:
    include:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: timeoutInMinutes
    value: 60
  - name: project
    value: "versionreporter"
  - name: product
    value: "vrs"
  - name: terraformInitSubscription
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: action
    value: ${{ parameters.action }}
  - name: majorMinorVersion
    value: "v0.1"
    ${{ if eq(variables['isMain'], true) }}:
     patchVersion:  $[counter(variables['majorMinorVersion'],0)]

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

parameters:
  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"

  - name: overrideAction
    displayName: Override Action
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: prImage
    displayName: Build PR Image
    type: boolean
    default: false
    values:
      - true
      - false

  - name: action
    displayName: Action
    type: string
    default: plan
    values:
      - plan
      - apply

  - name: env
    displayName: Environment
    type: object
    default:
      - name: "stg"
      - name: "prod"

  - name: reports
    displayName: Report to build
    type: object
    default:
      - name: "helm"
      - name: "paloalto"

stages:
  - stage: Precheck
    jobs:
      - job:
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: 'DCD-CFT-Sandbox'
              overrideAction: ${{ parameters.overrideAction }}

  - ${{ each environment in parameters.env }}:
    - stage: "Infrastructure_${{ environment.name }}"
      displayName: "Cosmos  ${{ environment.name }}"
      jobs:
        - job:
          steps:
            - script: echo Hello, Version Reporter DB!
              displayName: 'Executing ${{environment.name}} db'

  - stage: "Reports"
    displayName: "Report"
    jobs:
    - ${{ each report in parameters.reports }}:

      - job: BuildArtifact_${{report.name}}
        steps:
          - template: "reports/${{report.name}}/build.yaml"

      - job: PushContainer_${{report.name}}
        dependsOn: BuildReportArtifact
        displayName: Build and Push Container
        condition: |
         or( 
            and(
             succeeded(),
             eq(variables.isMain, true)
            ),
             and(
              succeeded(),
              eq(variables.prImage, true)
            )
          )
        steps:
          - template: "reports/acr_build.yml"
            parameters:
              spACR: "DTS-SHAREDSERVICES-PROD"
              containerACRRepo: 'version-reporter-service/jobs'
              buildContext: "reports/${{report.name}}/dist"
              buildID: $(Build.BuildID)
              prImage: ${{ variables.prImage }}
              ${{ if eq(variables['isMain'], true) }}:
                containerTag: "${{ variables.majorMinorVersion }}.$(patchVersion)"
              ${{ if and(eq(variables['prImage'], true), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['isMain'], false) ) }}:
                containerTag: "pr-$(System.PullRequest.PullRequestNumber)"
              ${{ if and(eq(variables['prImage'], true), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['isMain'], false) ) }}:
                containerTag: "pr-$(Build.BuildID)"
