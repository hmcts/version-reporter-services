name: Version Reporter Service - Backend

trigger:
  batch: true
  branches:
    include:
      - master

pool:
  vmImage: ubuntu-latest

variables:
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: timeoutInMinutes
    value: 60
  - name: project
    value: "versionreporter"
  - name: product
    value: "sds-platform"
  - name: env
    value: "stg"
  - name: terraformInitSubscription
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: action
    value: ${{ parameters.action }}
  - name: acrResourceGroup
    value: "sds-acr-rg"
  - name: acrName
    value: "sdshmctspublic"
  - name: acrServiceConnection
    value: "DTS-SHAREDSERVICES-PROD"
  - name: acrRepository
    value: "version-reporter-service"

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: master
      name: hmcts/cnp-azuredevops-libraries
      endpoint: 'hmcts'

parameters:
  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"

  - name: overrideAction
    displayName: Override Action
    type: string
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: prImage
    displayName: Build PR Image
    type: boolean
    default: false
    values:
      - true
      - false

  - name: action
    displayName: Action
    type: string
    default: plan
    values:
      - plan
      - apply

  - name: reports
    displayName: Report to build
    type: object
    default:
      - name: "helmcharts"
        type: "bash"
      - name: "paloalto"
        type: "python"

stages:
  - stage: Precheck
    jobs:
      - job:
        timeoutInMinutes: ${{ variables.timeoutInMinutes }}
        steps:
          - template: steps/terraform-precheck.yaml@cnp-azuredevops-libraries
            parameters:
              keyvaultName: 'infra-vault-nonprod'
              keyvaultSecret: 'azure-devops-token'
              serviceConnection: 'DCD-CFT-Sandbox'
              overrideAction: ${{ parameters.overrideAction }}

          - task: AzureKeyVault@1
            displayName: 'Get Git token from Keyvault'
            inputs:
              azureSubscription: "DCD-CNP-DEV"
              keyVaultName: "infra-vault-nonprod"
              secretsFilter: "github-api-token"

#  - ${{ each environment in parameters.env }}: We could have stg and prod
  - stage: "Infrastructure"
    displayName: "Infrastructure"
    jobs:
      - job: PlanAndApply
        steps:
          - template: steps/terraform.yaml@cnp-azuredevops-libraries
            parameters:
              location: ${{ parameters.location }}
              serviceConnection: "DTS-SHAREDSERVICES-STG"
              product: ${{ variables.product }}
              overrideAction: ${{ parameters.overrideAction }}
              environment: ${{ variables.env }}
              component: "storage"
              terraformInitSubscription: ${{ variables.terraformInitSubscription }}
              tfVarsFile: NULL
              initCommandOptions: >
                -reconfigure
              planCommandOptions: >
                -compact-warnings
                -lock-timeout=30s

  - stage: "Reports"
    displayName: "Reports"
    jobs:
    - ${{ each report in parameters.reports }}:
      - job: BuildArtifact_${{report.name}}
        displayName: Build ${{report.name}} Artifact
        steps:
        - bash: |
            LABEL=${{report.name}}
            PR_NUMBER=$(System.PullRequest.PullRequestNumber)
            REPO=$(Build.Repository.Name)
            RESPONSE=$(curl -L \
                            -H "Accept: application/vnd.github+json" \
                            -H "Authorization: Bearer $(github-api-token)" \
                            -H "X-GitHub-Api-Version: 2022-11-28" \
                            https://api.github.com/repos/hmcts/${REPO}/pulls/${PR_NUMBER} | jq --arg LABEL "$LABEL" -r '.labels[] | select(.name==$LABEL) | .name')

            if [[ $RESPONSE == $LABEL ]]
              echo "${RESPONSE} label found. A Container image will be published for this report."
              echo "##vso[task.setvariable variable=isLabelled]true"
            else
              echo "No label found for ${LABEL}. A Container image will not be published for this report."
              echo "##vso[task.setvariable variable=isLabelled]false"
            fi

          displayName: "Get ${{report.name}} Label"

        - ${{ if eq( report['type'], 'nodejs') }}:
          - template: "pipeline-templates/build-nodejs.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              versionSpec: "18.x"
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
        - ${{ elseif eq( report['type'], 'python')  }}:
          - template: "pipeline-templates/build-python.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              versionSpec: "3.11"
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
        - ${{ else }}:
          - template: "reports/${{report.name}}/build.yaml"
            parameters:
              prImage: ${{ parameters.prImage }}
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}

      - job: PushContainer_${{report.name}}
        dependsOn: BuildArtifact_${{report.name}}
        displayName: Push ${{report.name}} Container
        condition: |
         or(
            and(succeeded(), 
                eq(variables['isMain'], true), 
                eq(variables['isLabelled'], true)),
            and(succeeded(), eq('${{ parameters.prImage }}', true))
          )
        steps:
          - script: |
              repo_sha=$(git rev-parse --verify HEAD)
              image_tag_sha=${repo_sha:0:7}
              last_commit_time=$(date +'%Y%m%d%H%M%S')
              image_tag=$(echo ${image_tag_sha}-${last_commit_time})
              
              echo "##vso[task.setvariable variable=tag]'${{variables.acrRepository}}/${{report.name}}:prod-${image_tag}'"
            displayName: "ACR: Tag ${{report.name}}"

          - task: AzureCLI@1
            displayName: 'ACR: Build ${{report.name}}'
            enabled: true
            inputs:
              azureSubscription: ${{ variables.acrServiceConnection }}
              scriptLocation: 'inlineScript'
              workingDirectory: $(System.DefaultWorkingDirectory)/reports/${{report.name}}
              inlineScript: |
                az acr build -r ${{variables.acrName}} -t $(tag) -g ${{variables.acrResourceGroup}} .

